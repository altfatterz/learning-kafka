version: "3.5"
services:
  zk-1:
    image: confluentinc/cp-zookeeper:5.5.1
    container_name: zk-1
    hostname: zk-1
    ports:
      - "12181:12181"
    volumes:
      - data-zk-log-1:/var/lib/zookeeper/log
      - data-zk-data-1:/var/lib/zookeeper/data
    networks:
      - confluent
    environment:
      - ZOOKEEPER_SERVER_ID=1
      - ZOOKEEPER_CLIENT_PORT=12181
      - ZOOKEEPER_TICK_TIME=2000
      - ZOOKEEPER_INIT_LIMIT=5
      - ZOOKEEPER_SYNC_LIMIT=2
      - ZOOKEEPER_SERVERS=zk-1:2888:3888;zk-2:2888:3888;zk-3:2888:3888

  zk-2:
    image: confluentinc/cp-zookeeper:5.5.1
    container_name: zk-2
    hostname: zk-2
    ports:
      - "22181:22181"
    volumes:
      - data-zk-log-2:/var/lib/zookeeper/log
      - data-zk-data-2:/var/lib/zookeeper/data
    networks:
      - confluent
    environment:
      - ZOOKEEPER_SERVER_ID=2
      - ZOOKEEPER_CLIENT_PORT=22181
      - ZOOKEEPER_TICK_TIME=2000
      - ZOOKEEPER_INIT_LIMIT=5
      - ZOOKEEPER_SYNC_LIMIT=2
      - ZOOKEEPER_SERVERS=zk-1:2888:3888;zk-2:2888:3888;zk-3:2888:3888

  zk-3:
    image: confluentinc/cp-zookeeper:5.5.1
    container_name: zk-3
    hostname: zk-3
    ports:
      - "32181:32181"
    volumes:
      - data-zk-log-3:/var/lib/zookeeper/log
      - data-zk-data-3:/var/lib/zookeeper/data
    networks:
      - confluent
    environment:
      - ZOOKEEPER_SERVER_ID=3
      - ZOOKEEPER_CLIENT_PORT=32181
      - ZOOKEEPER_TICK_TIME=2000
      - ZOOKEEPER_INIT_LIMIT=5
      - ZOOKEEPER_SYNC_LIMIT=2
      - ZOOKEEPER_SERVERS=zk-1:2888:3888;zk-2:2888:3888;zk-3:2888:3888

  kafka-1:
    image: confluentinc/cp-enterprise-kafka:5.5.1
    container_name: kafka-1
    hostname: kafka-1
    ports:
      - "19092:19092"
      - "19093:19093"
    networks:
      - confluent
    volumes:
      - data-kafka-1:/var/lib/kafka/data
      - $PWD/kafka-1:/etc/kafka/secrets
    command: >
      bash -c 'echo "starting keystore check";
        until [ -f /etc/kafka/secrets/kafka-1.key ]; do
            echo "checking for /etc/kafka/secrets/kafka-1.key";
            sleep 5;
        done
        echo "keystore found";
        /etc/confluent/docker/run'
    environment:
      KAFKA_BROKER_ID: 101
      KAFKA_ZOOKEEPER_CONNECT: zk-1:12181,zk-2:22181,zk-3:32181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_METRIC_REPORTERS: "io.confluent.metrics.reporter.ConfluentMetricsReporter"
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: "kafka-1:9092,kafka-2:9092,kafka-3:9092"
      KAFKA_ADVERTISED_LISTENERS: SSL://kafka-1:19093,PLAINTEXT://kafka-1:19092,DOCKER://kafka-1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,SSL:SSL,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
      KAFKA_SSL_KEYSTORE_FILENAME: kafka.kafka-1.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: kafka-1_keystore
      KAFKA_SSL_KEY_CREDENTIALS: kafka-1_sslkey
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.kafka-1.truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: kafka-1_truststore
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: "HTTPS"
      #KAFKA_SSL_CLIENT_AUTH: "required"

  kafka-2:
    image: confluentinc/cp-enterprise-kafka:5.5.1
    container_name: kafka-2
    hostname: kafka-2
    ports:
      - "29092:29092"
      - "29093:29093"
    networks:
      - confluent
    volumes:
      - data-kafka-2:/var/lib/kafka/data
      - $PWD/kafka-2:/etc/kafka/secrets
    command: >
      bash -c 'echo "starting keystore check";
      until [ -f /etc/kafka/secrets/kafka-2.key ]; do
        echo "checking for /etc/kafka/secrets/kafka-2.key";
            sleep 5;
        done
        echo "keystore found";
        /etc/confluent/docker/run'
    environment:
      KAFKA_BROKER_ID: 102
      KAFKA_ZOOKEEPER_CONNECT: zk-1:12181,zk-2:22181,zk-3:32181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_METRIC_REPORTERS: "io.confluent.metrics.reporter.ConfluentMetricsReporter"
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: "kafka-1:9092,kafka-2:9092,kafka-3:9092"
      KAFKA_ADVERTISED_LISTENERS: SSL://kafka-2:29093,PLAINTEXT://kafka-2:29092,DOCKER://kafka-2:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,SSL:SSL,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
      KAFKA_SSL_KEYSTORE_FILENAME: kafka.kafka-2.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: kafka-2_keystore
      KAFKA_SSL_KEY_CREDENTIALS: kafka-2_sslkey
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.kafka-2.truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: kafka-2_truststore
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: "HTTPS"
      #KAFKA_SSL_CLIENT_AUTH: "required"

  kafka-3:
    image: confluentinc/cp-enterprise-kafka:5.5.1
    container_name: kafka-3
    hostname: kafka-3
    ports:
      - "39092:39092"
      - "39093:39093"
    networks:
      - confluent
    volumes:
      - data-kafka-3:/var/lib/kafka/data
      - $PWD/kafka-3:/etc/kafka/secrets
    command: >
      bash -c 'echo "starting keystore check";
      until [ -f /etc/kafka/secrets/kafka-3.key ]; do
        echo "checking for /etc/kafka/secrets/kafka-3.key";
            sleep 5;
        done
        echo "keystore found";
        /etc/confluent/docker/run'
    environment:
      KAFKA_BROKER_ID: 103
      KAFKA_ZOOKEEPER_CONNECT: zk-1:12181,zk-2:22181,zk-3:32181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_METRIC_REPORTERS: "io.confluent.metrics.reporter.ConfluentMetricsReporter"
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: "kafka-1:9092,kafka-2:9092,kafka-3:9092"
      KAFKA_ADVERTISED_LISTENERS: SSL://kafka-3:39093,PLAINTEXT://kafka-3:39092,DOCKER://kafka-3:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,SSL:SSL,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
      KAFKA_SSL_KEYSTORE_FILENAME: kafka.kafka-3.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: kafka-3_keystore
      KAFKA_SSL_KEY_CREDENTIALS: kafka-3_sslkey
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.kafka-3.truststore.jks
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: kafka-3_truststore
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: "HTTPS"
      #KAFKA_SSL_CLIENT_AUTH: "required"

volumes:
  data-zk-log-1:
  data-zk-data-1:
  data-zk-log-2:
  data-zk-data-2:
  data-zk-log-3:
  data-zk-data-3:
  data-kafka-1:
  data-kafka-2:
  data-kafka-3:

networks:
  confluent:
